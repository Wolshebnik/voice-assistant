import cfg from '../config.js';
import { createRingBuffer } from '../recognition/ring-buffer.js';
import { startCaptureToRing } from '../recognition/capture.js';
import { recognizeSamples } from '../recognition/recognize.js';
import { createWakeDetector } from '../recognition/kws.js';
import { getOfflineRecognizerOnce } from '../recognition/asr.js';
import { pickWakePhrase } from '../utils/find-command.js';
import { registerOnShutdown, shutdown } from './shutdown.js';
import { speak } from '../tts/speak.js';
import { applyProfile } from './apply-profile.js';
import { sleep } from './sleep.js';
import { normalizeToRms } from './audio-utils.js';
import { captureByStability } from './capture-stable.js';
import { captureByVad } from './capture-vad.js';
import { executeCommand } from './execute-command.js';
import { waitVoiceOnset } from './wait-voice-onset.js';

export async function run() {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
  applyProfile();

  // –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
  process.on('SIGINT', () => shutdown(0));
  process.on('SIGTERM', () => shutdown(0));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω ASR
  const recognizer = getOfflineRecognizerOnce({
    modelDir: cfg.MODEL_DIR,
    provider: cfg.PROVIDER,
    numThreads: cfg.NUM_THREADS,
    decodingMethod: cfg.DECODING_METHOD,
    maxActivePaths: cfg.MAX_ACTIVE_PATHS,
  });

  // –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä + –∑–∞—Ö–≤–∞—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const ring = createRingBuffer(cfg.RING_SECONDS, 16000);
  const cap = startCaptureToRing(ring);
  registerOnShutdown(async () => {
    await cap.stop();
  });

  // –î–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
  const wake = createWakeDetector(recognizer);

  console.log(
    `üõ°Ô∏è –î–µ–∂—É—Ä—é (ring=${cfg.RING_SECONDS}s). –°–∫–∞–∂–∏ ¬´${cfg.WAKE_WORD}¬ª. (Ctrl+C ‚Äî –≤—ã—Ö–æ–¥)`
  );

  while (true) {
    try {
      const slice = ring.takeLastSeconds(cfg.TRIGGER_SEC);
      if (slice.length && wake.isWake(slice)) {
        console.log(`‚úÖ –¢—Ä–∏–≥–≥–µ—Ä: ¬´${cfg.WAKE_WORD}¬ª`);

        // –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–∫–ª–∏–∫ –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ ‚Äî –∏–∑ –ö–û–ù–§–ò–ì–ê –ö–û–ú–ê–ù–î
        if (cfg.TTS?.ENABLED) {
          const phrase = pickWakePhrase();
          try {
            await speak(phrase, {
              voiceMac: cfg.TTS.VOICE_MAC,
              voiceWin: cfg.TTS.VOICE_WIN,
              rate: cfg.TTS.RATE,
            });
          } catch (e) {
            console.warn('TTS error:', e?.message || e);
          }
          await sleep(cfg.TTS.MUTE_WHILE_SPEAK_MS ?? 400); // —á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–π–º–∞—Ç—å —ç—Ö–æ
        }

        // –ñ–¥—ë–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç —Ä–µ—á–∏ –ø–æ —ç–Ω–µ—Ä–≥–∏–∏
        const started = await waitVoiceOnset(ring);
        if (!started) {
          console.log('‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –¥–µ–∂—É—Ä–∫—É.');
          await sleep(cfg.LOOP_PAUSE_MS);
          continue;
        }

        await sleep(cfg.COMMAND_RMS_HANG_MS);

        // –°–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã: —Ä–µ–∂–∏–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω) –∏–ª–∏ VAD/—Ñ–∏–∫—Å
        let cmdSlice;
        let totalSecUsed;
        if (cfg.COMMAND?.USE_STABLE) {
          // –ó–∞—Ö–≤–∞—Ç –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
          const text = await captureByStability(recognizer, ring);
          await executeCommand(text);
          console.log(`üõ°Ô∏è –ì–æ—Ç–æ–≤. –°–∫–∞–∂–∏ ¬´${cfg.WAKE_WORD}¬ª.`);
          await sleep(cfg.LOOP_PAUSE_MS);
          continue;
        } else if (cfg.VAD?.ENABLED) {
          const { totalSec } = await captureByVad(ring);
          totalSecUsed = totalSec;
          cmdSlice = ring.takeLastSeconds(totalSec);
        } else {
          await sleep((cfg.COMMAND_SEC ?? 2.2) * 1000);
          const totalSec =
            (cfg.COMMAND_PRE_ROLL_SEC ?? 0) + (cfg.COMMAND_SEC ?? 2.2);
          totalSecUsed = totalSec;
          cmdSlice = ring.takeLastSeconds(totalSec);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        let cmdText = recognizeSamples(
          recognizer,
          normalizeToRms(cmdSlice, 0.035),
          ring.sampleRate
        );

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —á—É—Ç—å –±–æ–ª—å—à–∏–º –æ–∫–Ω–æ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        if (!cmdText || cmdText.trim().length < 3) {
          const retrySec = Math.min(
            (totalSecUsed ?? 2.2) + 0.8,
            cfg.VAD?.MAX_COMMAND_SEC ?? 6
          );
          const retrySlice = ring.takeLastSeconds(retrySec);
          cmdText = recognizeSamples(
            recognizer,
            normalizeToRms(retrySlice, 0.035),
            ring.sampleRate
          );
        }
        await executeCommand(cmdText);

        console.log(`üõ°Ô∏è –ì–æ—Ç–æ–≤. –°–∫–∞–∂–∏ ¬´${cfg.WAKE_WORD}¬ª.`);
        await sleep(cfg.LOOP_PAUSE_MS);
        continue;
      }

      await sleep(cfg.TRIGGER_POLL_MS);
    } catch (e) {
      console.error('‚ö†Ô∏è Loop error:', e);
      await sleep(250);
    }
  }
}
